import { GeneralRepository } from '../../repositories/general.repository';
import { General } from '../../models/general.model';
import { Session } from '../../models/session.model';
import { User } from '../../models/user.model';

/**
 * DieOnPrestart Service
 * 게임 시작 전 장수 삭제 (다시 시작)
 * PHP: /sam/hwe/sammo/API/General/DieOnPrestart.php
 */
export class DieOnPrestartService {
  static async execute(data: any, user?: any) {
    const sessionId = data.session_id || 'sangokushi_default';
    const userId = user?.userId;
    
    if (!userId) {
      return { success: false, message: '사용자 ID가 필요합니다' };
    }

    try {
      // 1. 세션 정보 조회
      const session = await Session.findOne({ session_id: sessionId });
      if (!session) {
        return { success: false, message: '세션을 찾을 수 없습니다' };
      }

      const opentime = session.data?.opentime || new Date(0);
      const turntime = session.data?.turntime || new Date();

      // 2. 장수 조회
      const general = await General.findOne({
        session_id: sessionId,
        'data.owner': userId,
        'data.npc': 0
      });

      if (!general) {
        return { success: false, message: '장수가 없습니다' };
      }

      // 3. 게임 시작 여부 확인
      if (turntime > opentime) {
        return { success: false, message: '게임이 시작되었습니다.' };
      }

      // 4. 이미 국가에 소속되어 있는지 확인
      if (general.data?.nation && general.data.nation !== 0) {
        return { success: false, message: '이미 국가에 소속되어있습니다.' };
      }

      // 5. 최소 턴 체크 (너무 빨리 삭제하는 것 방지)
      // TODO: minTurnDieOnPrestart 체크

      // 6. 장수 삭제
      await General.deleteOne({ _id: general._id });

      // 7. User의 장수 연결 해제
      await User.updateOne(
        { user_id: userId },
        { $unset: { general_id: 1 } }
      );

      return {
        success: true,
        message: '장수가 삭제되었습니다. 다시 가입할 수 있습니다.'
      };
    } catch (error: any) {
      return {
        success: false,
        message: error.message
      };
    }
  }
}
